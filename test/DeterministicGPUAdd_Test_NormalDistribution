#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>
#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <time.h>

#include <thrust/host_vector.h>
#include <thrust/device_vector.h>
#include <thrust/device_malloc.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/random.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/transform.h>
#include <thrust/extrema.h>
#include <thrust/execution_policy.h>



/*********************************************************************************************************************
									DECLARATION OF MACROS AND GLOBAL VARIABLES
*********************************************************************************************************************/
#define N 5120000
#define ITERATION 32

double average, variance, std_dev, sum1, sum2, minV, maxV, N_min, N_max;
int	   QF;

__host__ __device__ unsigned long long int pow_2(int qf) {
	unsigned long long int expo = 2;
	for (int i = qf - 1; i > 0; i--)
	{
		expo *= 2;
	}
	return expo;
}


__global__ void AtomicAddKernelULLInt(double *g_inData, unsigned long long int *g_outData, unsigned long long int scaling_factor) {
	extern __shared__ double sharedMem[];

	int threadID = threadIdx.x;
	int globalID = blockDim.x * blockIdx.x + threadIdx.x;

	g_outData[blockIdx.x] = 0;
	sharedMem[threadID] = g_inData[globalID];
	__syncthreads();

	unsigned long long int temp = sharedMem[threadID] * scaling_factor;

	//printf("scaling_factor: %llu \n", scaling_factor);

	atomicAdd(&g_outData[blockIdx.x], temp);
	__syncthreads();


	//printf("%llu\n", g_outData[blockIdx.x]);

}

__global__ void AddAbsMinKernel(double* d_in, double min) {
	int globalID = blockDim.x * blockIdx.x + threadIdx.x;

	d_in[globalID] += abs(min);
}


/****
	Find maximum, minimum, mean, variance and standard deviation of a vector
**/
void Statistics(double* h_inData, int n, bool verbosity) {
	average = 0, variance = 0, std_dev = 0, sum1 = 0, sum2 = 0;
	minV = h_inData[0];

	for (int i = 0; i < n; i++)
	{
		if (verbosity)
		{
			sum1 += h_inData[i];
		}
	}

	if (verbosity)
	{
		average = sum1 / (double)n;

		/*  Compute  variance  and standard deviation  */
		for (int i = 0; i < n; i++)
		{
			sum2 += powf((h_inData[i] - average), 2.0);
		}
		variance = sum2 / (double)n;
		std_dev = sqrt(variance);

		printf("Average of all elements is %.25lf\n", average);
		printf("Standard deviation is %.25lf\n", std_dev);
	}
}


bool exponent_Init(int block_size, int grid_size) {
	float result;

	if (N_max * block_size * grid_size >= ULLONG_MAX)
	{
		return false;
	}
	else
	{
		if (N_min < 0)
		{
			result = ULLONG_MAX / ((N_max + abs(N_min)) * block_size * grid_size);
			QF = ceil(log2(result));
			if (QF > 0)
			{
				return true;
			}
			else return false;
		}
		else {
			result = ULLONG_MAX / (N_max * block_size * grid_size);
			QF = ceil(log2(result));
			if (QF > 0)
			{
				return true;
			}
			else return false;
		}
	}

}

double timeElapsed(clock_t begin, clock_t end) {
	return (double)(end - begin) / CLOCKS_PER_SEC;
}


struct RandomGenerator_uniform_real_distribution {
	double lowerBound, upperBound, seed;

	__host__ __device__
		RandomGenerator_uniform_real_distribution(double _lowerBound = 0.0f, double _upperBound = 1.0f, int _seed = 1) : lowerBound(_lowerBound),
		upperBound(_upperBound),
		seed(_seed)
	{}
	__host__ __device__
		double operator()(const unsigned int n) const
	{
		// create a random number generator
		thrust::default_random_engine rng;

		// create a uniform_real_distribution to produce floats from [lowerBound, upperBound) given by function call
		thrust::uniform_real_distribution<double> dist(lowerBound, upperBound);

		// jump past the numbers used by the subsequences before me
		rng.discard(n * seed);

		// generate a random number from the range [lowerBound, upperBound)
		return dist(rng);
	}
};



/*********************************************************************************************************************
														MAIN
*********************************************************************************************************************/
int main() {
	/*********************************************************************************************************************
											CONFIGURE CUDA GRID
	*********************************************************************************************************************/
	int blockSize;
	int gridSize;
	blockSize = 512;
	gridSize = (N + blockSize - 1) / blockSize;

	double* results = (double*)malloc(sizeof(double) * ITERATION);
	double* accResults_fxdpt = (double*)malloc(sizeof(double) * ITERATION);
	double* accResults_float = (double*)malloc(sizeof(double) * ITERATION);

	double sum_double;
	float sum_float;

	clock_t begin, end;
	double time_spent;

	double* time_elasped_double = (double*)malloc(sizeof(double) * ITERATION);
	double* time_elasped_float = (double*)malloc(sizeof(double) * ITERATION);
	double* time_elasped_GPU = (double*)malloc(sizeof(double) * ITERATION);


	for (int i = 0; i < ITERATION; i++)
	{
		printf("%dth...\n", i);

		/*********************************************************************************************************************
													RAW DATA GENERATION
		*********************************************************************************************************************/

		printf("Data initilization begins...\n");
		begin = clock();

		thrust::host_vector<double> h_in(N);

		//// create a minstd_rand object to act as our source of randomness
		thrust::minstd_rand rng;
		// create a normal_distribution to produce floats from the Normal distribution
			// with mean 0.0 and standard deviation 3.5
		thrust::random::normal_distribution<double> dist(0.0f, 50.0f);


		for (int j = 0; j < N; j++)
		{
			rng.discard(j * i);
			h_in[j] = dist(rng);
		}


		// test
		/*float* h_in_raw = thrust::raw_pointer_cast(&h_in[0]);
		Statistics(h_in_raw, N, 1);*/


		thrust::device_vector<double> d_in = h_in;


		end = clock();
		time_spent = timeElapsed(begin, end);
		printf("Data initilization spent %lf seconds.\n", time_spent);


		sum_double = 0;
		printf("CPU Summation begins (double)...\n");
		begin = clock();


		// get sum of input vector on CPU (double)
		for (int j = 0; j < N; j++)
		{
			sum_double += h_in[j];
		}
		std::cout << "CPU result (double): " << sum_double << std::endl;

		end = clock();
		time_spent = timeElapsed(begin, end);
		printf("CPU Summation (double) spent %lf seconds.\n", time_spent);
		time_elasped_double[i] = time_spent;


		printf("CPU Summation begins (float)...\n");
		begin = clock();

		sum_float = 0;
		// get sum of input vector on CPU (float)
		for (int j = 0; j < N; j++)
		{
			sum_float += (float)h_in[j];
		}
		std::cout << "CPU result (float): " << sum_double << std::endl;

		end = clock();
		time_spent = timeElapsed(begin, end);
		printf("CPU Summation (float) spent %lf seconds.\n", time_spent);
		time_elasped_float[i] = time_spent;

		/*******************************************************************************************************
													FIND MIN AND MAX
		********************************************************************************************************/
		printf("Finding Max and Min begins...\n");
		begin = clock();

		// get the tuple of (absolute position of minimum , absolute position of maximum), 
		// each of which is accessible with .first and .second
		thrust::pair<thrust::device_vector<double>::iterator, thrust::device_vector<double>::iterator> result
			= thrust::minmax_element(d_in.begin(), d_in.end());

		// get the offset in device_vector
		unsigned long long int minPos = result.first - d_in.begin();
		unsigned long long int maxPos = result.second - d_in.begin();

		// test
		/*std::cout << d_in[minPos] << std::endl;
		std::cout << d_in[maxPos] << std::endl;*/

		maxV = d_in[maxPos];
		minV = d_in[minPos];
		N_max = maxV;
		N_min = minV;

		std::cout << "Max: " << N_max << ", Min: " << N_min << std::endl;

		end = clock();
		time_spent = timeElapsed(begin, end);
		printf("Statistics spent %lf seconds.\n", time_spent);
		std::cout << "Finding Max and Min ends." << std::endl;

		// Thrust data types are not understood by a CUDA kernel and need to be converted back to its 
		// underlying pointer
		double* d_in_raw = thrust::raw_pointer_cast(&d_in[0]);


		/*********************************************************************************************************************
													CHECK IF ANY ELEMENT IS NEGATIVE
		*********************************************************************************************************************/
		if (N_min < 0) // if yes, launch a kernel to turn all values into positive
		{
			AddAbsMinKernel << < gridSize, blockSize >> > (d_in_raw, N_min);
			cudaDeviceSynchronize();
		}


		/*********************************************************************************************************************
													FIND MAXIMUM DECIMAL PLACES
		*********************************************************************************************************************/
		if (!exponent_Init(blockSize, gridSize))
		{
			std::cout << "Overflow." << std::endl;
			return 2;
		} 

		if (QF > 50)
		{
			QF = 50;
		}

		//QF = 27;

		std::cout << "QF: " << QF << std::endl;

		unsigned long long int scaling_factor = pow_2(QF-1);

		unsigned long long int sum = 0;


		unsigned long long int *h_out = (unsigned long long int*)malloc(gridSize * sizeof(unsigned long long int));

		unsigned long long int *d_out; cudaMalloc(&d_out, gridSize * sizeof(unsigned long long int));

		printf("Kernel begins...\n");
		begin = clock();

		AtomicAddKernelULLInt << <gridSize, blockSize, blockSize * sizeof(double) >> > (d_in_raw, d_out, scaling_factor);
		cudaDeviceSynchronize();

		end = clock();
		time_spent = timeElapsed(begin, end);
		printf("Kernel spent %.15lf seconds.\n", time_spent);
		time_elasped_GPU[i] = time_spent;

		cudaMemcpy(h_out, d_out, gridSize * sizeof(unsigned long long int), cudaMemcpyDeviceToHost);

		for (int j = 0; j < gridSize; j++)
		{
			sum += h_out[j];
		}

		if (N_min < 0)
		{
			results[i] = ((double)sum / scaling_factor) - ((abs(N_min) * N));
		}
		else
		{
			results[i] = (double)sum / scaling_factor;
		}


		accResults_fxdpt[i] = 1 - (abs(results[i] - sum_double) / abs(sum_double));

		accResults_float[i] = 1 - (abs(sum_float - sum_double) / abs(sum_double));


		cudaFree(d_out);
		free(h_out);
		printf("----------------------------------------------------------\n");
	}

	std::cout << "GPU results: " << std::endl;
	//printf("GPU result: %lf \n", results[0]);
	Statistics(accResults_fxdpt, ITERATION, true);

	std::cout << "Float results: " << std::endl;
	Statistics(accResults_float, ITERATION, true);

	printf("**************************************************************\n");

	std::cout << "Double Elapsed Time: " << std::endl;
	Statistics(time_elasped_double, ITERATION, true);

	std::cout << "Float Elapsed Time: " << std::endl;
	Statistics(time_elasped_float, ITERATION, true);

	std::cout << "GPU Elapsed Time: " << std::endl;
	Statistics(time_elasped_GPU, ITERATION, true);


}
